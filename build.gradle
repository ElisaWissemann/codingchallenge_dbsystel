import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.jetbrains.kotlin.jvm' version '1.7.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
	id ("org.unbroken-dome.test-sets") version "4.0.0"

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


sourceSets {
	main {
		java.srcDirs('./src/main/kotlin')
		resources.srcDirs('./src/main/resources')
	}
	test {
		java.srcDirs('./src/test/kotlin')
		resources.srcDirs('./src/test/resources')
	}
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			java.srcDirs('./src/integration/kotlin')
			resources.srcDirs('./src/integration/resources')
		}
	}
}
configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestImplementation.extendsFrom testImplementation
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// local UnitTests
	testImplementation("org.springframework.boot:spring-boot-starter-test:3.0.1")
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.mockk:mockk:1.13.1")
	testImplementation("com.google.truth:truth:1.1.3")

}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	description = "Run integration tests"
	group = "verification"
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

